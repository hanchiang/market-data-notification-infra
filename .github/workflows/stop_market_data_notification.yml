name: Stop Market data notification
on:
  schedule:
    - cron: '55 20 * * 1-5' # weekdays
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: false
        default: 'info' 
        type: choice
        options:
        - info
        - warning
        - debug
jobs:
  health_check:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      health_check_outcome: ${{ steps.health_check.outputs.outcome }}
    env:
      HOST_NAME: ${{ secrets.HOST_NAME }}
    steps:
      - name: Check if EC2 is already stopped
        id: health_check
        run: |
          health_check=$(curl $HOST_NAME || true)
          if [ -z "$health_check" ]
          then
            echo "::set-output name=outcome::failure"
          else
            echo "::set-output name=outcome::success"
          fi
  notify_ec2_already_stopped:
    runs-on: ubuntu-latest
    needs: [health_check]
    if: ${{ needs.health_check.outputs.health_check_outcome == 'failure' }}
    steps:
      - name: Send telegram notification EC2 is already stopped
        env:
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          text=$(echo "\[Github action\] Market data notification infra: EC2 is already stopped at $now. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" | sed 's~[[:blank:]]~%20~g')
          curl "https://api.telegram.org/bot${TELEGRAM_DEV_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_DEV_ID}&text=$text"
          exit 0
  stop_ec2:
    runs-on: ubuntu-latest
    needs: [health_check]
    if: ${{ needs.health_check.outputs.health_check_outcome == 'success' }}
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DOMAIN: ${{ secrets.DOMAIN }}
    steps:
      - uses: actions/checkout@v3
      - name: Create AWS config and credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          pwd
          ls -la

          mkdir ~/.aws/
          cat << EOF > ~/.aws/config
          [default]
          region = $AWS_REGION
          output = json
          EOF
          chmod 600 ~/.aws/config

          cat << EOF > ~/.aws/credentials
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY
          aws_secret_access_key = $AWS_SECRET_KEY
          EOF
          chmod 600 ~/.aws/credentials
      - name: Run stop script
        run: | 
          cd instances
          ./scripts/stop.sh $DOMAIN
  notify_unsuccesful_run:
    runs-on: ubuntu-latest
    needs: [stop_ec2]
    if: ${{ needs.stop_ec2.result == 'failure' }}
    steps:
      - name: Send telegram notification unsuccessful run
        env:
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          text=$(echo "\[Github action\] Market data notification infra: Failed to stop EC2 at $now. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" | sed 's~[[:blank:]]~%20~g')
          curl "https://api.telegram.org/bot${TELEGRAM_DEV_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_DEV_ID}&text=$text"
  notify_successful_run:
    runs-on: ubuntu-latest
    needs: [stop_ec2]
    if: ${{ always() && needs.stop_ec2.result == 'success' }}
    steps:
      - name: Send telegram notification successful run
        env:
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          text=$(echo "\[Github action\] Market data notification infra: Successfully stopped EC2 at $now. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" | sed 's~[[:blank:]]~%20~g')
          curl "https://api.telegram.org/bot${TELEGRAM_DEV_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_DEV_ID}&text=$text"
