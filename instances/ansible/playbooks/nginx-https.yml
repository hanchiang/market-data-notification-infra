- hosts: market_data_notification
  name: Install SSL for nginx, configure nginx
  remote_user: "{{ USER }}"
  gather_facts: no
  vars_files:
    - ../vars.yml
  tasks:
    - name: Install required packages for SSL
      args:
        executable: /bin/bash
      become: yes
      become_method: su
      become_user: root
      become_exe: "sudo su -"
      register: install_required_packages
      shell: |
        export DEBIAN_FRONTEND=noninteractive

        apt-get -y install certbot
        apt-get -y install python3-certbot-nginx
    - debug: var=install_required_packages.stdout_lines
    - debug: var=install_required_packages.stderr_lines

    - name: Install SSL cert
      args:
        executable: /bin/bash
      register: install_ssl
      become: yes
      become_method: su
      become_user: root
      become_exe: "sudo su -"
      async: 600
      poll: 15
      loop: "{{ DOMAINS }}"
      shell: |
        mkdir -p /etc/ssl/{{ item }}

        SSL_CERT_FILE_PATH="/etc/letsencrypt/live/{{ item }}/cert.pem"
        SSL_KEY_FILE_PATH="/etc/letsencrypt/live/{{ item }}/privkey.pem"

        if [ -s "$SSL_CERT_FILE_PATH" ] && [ -s "$SSL_KEY_FILE_PATH" ]
        then
          echo "SSL certs already exist for {{ item }}"
        else
          # save a backup of nginx config
          echo "Saving a backup of /etc/nginx/sites-available/{{ DOMAIN }}"
          cp /etc/nginx/sites-available/{{ DOMAIN }} /etc/nginx/sites-available/{{ DOMAIN }}.bak

          certbot --nginx -d {{ item }} --non-interactive --agree-tos -m {{ ADMIN_EMAIL }}

          sudo systemctl force-reload nginx
          sleep 10
        fi

        # cron
        crontab -l > mycron
        echo "0 12-23 * * * /usr/bin/certbot --quiet renew" >> mycron

        mv mycron mycron.temp
        cat mycron.temp | sort | uniq > mycron
        cp mycron mycron.bak
        crontab mycron
    - debug:
        var: item.stdout_lines
      loop: "{{ install_ssl.results }}"

    - name: Configure common nginx config
      args:
        executable: /bin/bash
      register: common_nginx_config
      shell: |
        sudo mkdir -p /etc/nginx/common

        cat <<EOF | sudo tee /etc/nginx/common/json_log.conf > /dev/null
        log_format json_combined escape=json
        '{'
          '"time_iso": "\$time_iso8601",'
          '"remote_addr": "\$remote_addr",'
          '"remote_user": "\$remote_user",'
          '"remote_port": "\$remote_port",'
          '"status": "\$status",'
          '"connection": "\$connection",'
          '"request_id": "\$request_id",'
          '"content_length": "\$content_length",'
          '"request": "\$request",'
          '"request_uri": "\$request_uri",'
          '"request_body": "\$request_body",'
          '"request_time": "\$request_time",'
          '"body_bytes_sent": "\$body_bytes_sent",'
          '"bytes_sent": "\$bytes_sent",'
          '"http_user_agent": "\$http_user_agent",'
          '"http_x_forwarded_for": "\$http_x_forwarded_for",'
          '"args": "\$args",'
          '"http_host": "\$http_host",'
          '"http_origin": "\$http_origin",'
          '"http_referrer": "\$http_referer",'
          '"server_name": "\$server_name",'
          '"upstream": "\$upstream_addr",'
          '"upstream_connect_time": "\$upstream_connect_time",'
          '"upstream_header_time": "\$upstream_header_time",'
          '"upstream_response_time": "\$upstream_response_time",'
          '"upstream_response_length": "\$upstream_response_length",'
          '"upstream_cache_status": "\$upstream_cache_status",'
          '"ssl_protocol": "\$ssl_protocol",'
          '"ssl_cipher": "\$ssl_cipher",'
          '"scheme": "\$scheme",'
          '"server_protocol": "\$server_protocol",'
          '"pipe": "\$pipe",'
          '"gzip_ratio": "\$gzip_ratio"'
        '}';
        EOF

        cat <<EOF | sudo tee /etc/nginx/common/market_data_notification_upstream.conf > /dev/null
        upstream market_data_notification {
          server localhost:8080;
        }
        EOF

        cat <<EOF | sudo tee /etc/nginx/common/market_data_notification_proxy.conf > /dev/null
        proxy_pass http://market_data_notification;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwared-Proto \$scheme;
        EOF

        cat <<EOF | sudo tee /etc/nginx/common/favicon_location.conf > /dev/null
        location = /favicon.ico {
          return 204;
          access_log     off;
          log_not_found  off;
        }
        EOF
    - debug: var=common_nginx_config.stdout_lines
    - debug: var=common_nginx_config.stderr_lines

    - name: Update main nginx config
      args:
        executable: /bin/bash
      register: update_nginx_config
      shell: |
        SSL_CERT_FILE_PATH="/etc/letsencrypt/live/{{ DOMAIN }}/cert.pem"
        SSL_KEY_FILE_PATH="/etc/letsencrypt/live/{{ DOMAIN }}/privkey.pem"

        cat <<EOF | sudo tee /etc/nginx/sites-available/{{ DOMAIN }} > /dev/null
        include /etc/nginx/common/market_data_notification_upstream.conf;

        server {
          listen 80;
          listen [::]:80;

          server_name {{ DOMAIN }};

          return 301 https://\$host\$request_uri;
        }

        limit_req_zone \$binary_remote_addr zone=market_data_notification_limit:10m rate=3r/s;

        include /etc/nginx/common/json_log.conf;

        server {
          listen 443 ssl;

          ssl_certificate      $SSL_CERT_FILE_PATH;
          ssl_certificate_key  $SSL_KEY_FILE_PATH;

          server_name {{ DOMAIN }};

          server_tokens off;
          client_max_body_size 1m;
          
          access_log /var/log/nginx/access.log json_combined;
          error_log /var/log/nginx/error.log;

          include /etc/nginx/common/favicon_location.conf;

          location / {
            limit_req zone=market_data_notification_limit burst=6 delay=2;
            limit_req_status 444;
            include /etc/nginx/common/market_data_notification_proxy.conf;
          }
        }
        EOF

        sudo ln -sf /etc/nginx/sites-available/{{ DOMAIN }} /etc/nginx/sites-enabled/
        sudo nginx -t
        sudo systemctl reload nginx
    - debug: var=update_nginx_config.stdout_lines
    - debug: var=update_nginx_config.stderr_lines


